index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';
import { createStore } from 'redux';
import { Provider } from 'react-redux';
import Reducer from "./reducers/Reducers"
import { BrowserRouter } from 'react-router-dom';


const store = createStore(Reducer);
ReactDOM.render(<Provider store={store}>
    <BrowserRouter>
        <App />
    </BrowserRouter>
</Provider>, document.getElementById('root'));


// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();


app.js
import React, { Component } from "react";
import "./App.css";
import { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";
import Form from "./components/Form";
import List from "./components/List";
import Update from "./components/Update";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import Typography from "@material-ui/core/Typography";
import Button from "@material-ui/core/Button";
import Menu from "@material-ui/core/Menu";
class App extends Component {
	render() {
		/*     console.log(this.state) */
		return (
			<div className="App">
				<AppBar position="static">Cloth Shop</AppBar>
				{/* <Button
					aria-controls="simple-menu"
					aria-haspopup="true"
					// onClick={handleClick}
				>
					Open Menu
				</Button> */}
				<AppBar position="static" color="default">
					<Router>
						<ul>
							<li>
								<Link to="/">Home</Link>
							</li>
							<li>
								<Link to="/Form">Add Clothes</Link>
							</li>
							<li>
								<Link to="/ClothList">List</Link>
							</li>
						</ul>
						<Switch>
							<Route exact path="/Form" component={Form}></Route>
							<Route exact path="/ClothList" component={List}></Route>
							<Route exact path="/Update" component={Update}></Route>
						</Switch>
					</Router>
				</AppBar>
			</div>
		);
	}
}

export default App;

form.js

import React, { Component } from "react";
import { connect } from "react-redux";
import { addClothes } from "../actions/action";
import { makeStyles } from "@material-ui/core/styles";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Radio from "@material-ui/core/Radio";
import RadioGroup from "@material-ui/core/RadioGroup";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import FormControl from "@material-ui/core/FormControl";
import FormLabel from "@material-ui/core/FormLabel";
import { InputLabel, MenuItem } from "@material-ui/core";
import Select from "@material-ui/core/Select";
class Form extends Component {
	constructor(props) {
		super(props);
		this.state = {
			detail: {
				code: "",
				brand: "",
				gender: "",
				type: "",
				price: "",
				stock: "",
			},
		};
	}
	handleChange = (e) => {
		let name = e.target.name;
		let value = e.target.value;
		this.setState({
			detail: {
				...this.state.detail,
				[name]: value,
			},
		});
	};
	addList = (e) => {
		e.preventDefault();
		let { dispatch } = this.props;
		dispatch(addClothes("ADD_LIST", this.state.detail));
	};
	render() {
		return (
			<form>
				<div>
					<div>
						<label>
							Unique code
							<TextField
								id="outlined-basic"
								varient="outlined"
								type="text"
								name="code"
								//value={this.state.code}
								onChange={this.handleChange}
							/>
						</label>
					</div>
					<div>
						<label>
							Brand
							<TextField
								type="text"
								name="brand"
								onChange={this.handleChange}
							/>
						</label>
					</div>
					<div>
						<label>
							<FormControl component="fieldset">
								<FormLabel component="legend">Gender</FormLabel>
								<RadioGroup
									aria-label="gender"
									name="gender1"
									// value="female"
									onChange={this.handleChange}
								>
									<FormControlLabel
										control={<Radio />}
										type="radio"
										color="secondary"
										name="gender"
										value="male"
										onChange={this.handleChange}
										required="true"
										label="Male"
									/>

									<FormControlLabel
										control={<Radio />}
										type="radio"
										name="gender"
										value="female"
										onChange={this.handleChange}
										label="Female"
									/>
								</RadioGroup>
							</FormControl>
						</label>
					</div>

					<div>
						<label>
							<FormControl>
								<InputLabel>Type</InputLabel>
								<Select
									name="type"
									value={this.state.value}
									onChange={this.handleChange}
								>
									<MenuItem>{/* <em>None</em> */}</MenuItem>
									<MenuItem value="Jeans">Jeans</MenuItem>
									<MenuItem value="trousers">trousers</MenuItem>
									<MenuItem value="shirt">shirt</MenuItem>
									<MenuItem value="top">top</MenuItem>
								</Select>
							</FormControl>
						</label>
					</div>
					<br />
					<br />
					<div>
						<label>
							price
							<TextField
								type="text"
								name="price"
								onChange={this.handleChange}
							/>
						</label>
					</div>
					<div>
						<label>
							stock
							<TextField
								type="text"
								name="stock"
								onChange={this.handleChange}
							/>
						</label>
					</div>
					<Button
						type="button"
						variant="contained"
						color="primary"
						onClick={this.addList}
					>
						Submit
					</Button>
				</div>
			</form>
		);
	}
}
const mapStateToProps = (state) => {
	console.log("asdsdadsada", state);
	return {
		clothes: state,
	};
};

export default connect(mapStateToProps)(Form);

List.js
import React, { Component } from "react";
import { connect } from "react-redux";
import { Link } from "react-router-dom";
/* import { update } from '../actions/action'; */
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
import TableContainer from "@material-ui/core/TableContainer";
import TableHead from "@material-ui/core/TableHead";
import TableRow from "@material-ui/core/TableRow";
import Paper from "@material-ui/core/Paper";
import Button from "@material-ui/core/Button";
export class List extends Component {
	render() {
		return (
			<TableContainer component={Paper}>
				<Table area-label="simple table">
					<TableHead>
						<TableRow>
							<TableCell>Dress code</TableCell>
							<TableCell>Brand</TableCell>
							<TableCell>Gender</TableCell>
							<TableCell>Type</TableCell>
							<TableCell>Price</TableCell>
							<TableCell>Stock</TableCell>
							<TableCell>Action</TableCell>
						</TableRow>
					</TableHead>
					<TableBody>
						{this.props.clothes.map((cloth, index) => {
							return (
								<TableRow key={index}>
									<TableCell>{cloth.code}</TableCell>
									<TableCell>{cloth.brand}</TableCell>
									<TableCell>{cloth.gender}</TableCell>
									<TableCell>{cloth.type}</TableCell>
									<TableCell>{cloth.price}</TableCell>
									<TableCell>{cloth.stock}</TableCell>

									<TableCell>
										<Button
											variant="contained"
											// color="primary"
											onClick={(e) => {
												this.props.dispatch({
													type: "EDIT_LIST",
													index,
													cloth,
												});
												this.props.history.push("/Update");
											}}
										>
											{/* <Link to="/Update"> Update </Link>{" "} */}
											update
										</Button>
									</TableCell>
									<TableCell>
										<Button
											variant="contained"
											color="primary"
											onClick={(e) =>
												this.props.dispatch({ type: "DELETE_LIST", index })
											}
										>
											Delete
										</Button>
									</TableCell>
								</TableRow>
							);
						})}
					</TableBody>
				</Table>
			</TableContainer>
		);
	}
}
const mapStateToProps = (state) => {
	console.log(state);
	return {
		clothes: state.dress,
	};
};
export default connect(mapStateToProps)(List);


update.js
import React, { Component } from "react";
import { connect } from "react-redux";
import { changeClothes } from "../actions/action";
export class Update extends Component {
	constructor(props) {
		super(props);

		this.state = {
			code: "",
			brand: "",
			gender: "",
			type: "",
			price: "",
			stock: "",
		};
	}
	componentDidMount = () => {
		this.setState({
			code: this.props.fashion.code,
			brand: this.props.fashion.brand,
			gender: this.props.fashion.gender,
			type: this.props.fashion.type,
			price: this.props.fashion.price,
			stock: this.props.fashion.stock,
		});
	};
	handleChange = (e) => {
		this.setState({
			[e.target.name]: e.target.value,
		});
	};

	Update = (e) => {
		const { dispatch } = this.props;
		dispatch(changeClothes("UPDATE_LIST", this.state, this.props.index));
	};
	render() {
		return (
			<div>
				<form>
					<div>
						<label>
							Unique code
							<input
								type="text"
								name="code"
								value={this.state.code}
								onChange={this.handleChange}
							></input>
						</label>
					</div>
					<div>
						<label>
							Brand
							<input
								type="text"
								name="brand"
								value={this.state.brand}
								onChange={this.handleChange}
							></input>
						</label>
					</div>
					<div>
						<label>
							gender Male
							<input
								type="radio"
								name="gender"
								value="male"
								checked={this.state.gender === "male"}
								onChange={this.handleChange}
							></input>
							Female
							<input
								type="radio"
								name="gender"
								value="female"
								checked={this.state.gender === "female"}
								onChange={this.handleChange}
							></input>
						</label>
					</div>

					<div>
						<label>
							Type
							<select
								name="type"
								value={this.state.value}
								onChange={this.handleChange}
							>
								<option value="Jeans">Jeans</option>
								<option value="trousers">trousers</option>
								<option value="shirt">shirt</option>
								<option value="top">top</option>
							</select>
						</label>
					</div>
					<div>
						<label>
							price
							<input
								type="text"
								name="price"
								value={this.state.price}
								onChange={this.handleChange}
							></input>
						</label>
					</div>
					<div>
						<label>
							stock
							<input
								type="text"
								name="stock"
								value={this.state.stock}
								onChange={this.handleChange}
							></input>
						</label>
						<button type="button" onClick={this.Update}>
							Submit
						</button>
					</div>
				</form>
			</div>
		);
	}
}
const mapStateToProps = (cloth) => {
	return {
		fashion: cloth.cloth,
	};
};

export default connect(mapStateToProps)(Update);


action.js
export const addClothes = (actionType, clothes) => {
    console.log(clothes)
    return {
        type: actionType,
     clothes:clothes  
}
}
export const changeClothes = (actionType, cloth, i) => {
    console.log("ckeck id here first ",cloth,i)
    return {
        type: actionType,
        data: cloth,
        num:i
     }
}

reducers.js
const initialState = {
	dress: [],
	cloth: {},
	id: "",
};
const Reducer = (state = initialState, action) => {
	console.log("to updatae", state, action);

	switch (action.type) {
		case "ADD_LIST":
			const { clothes } = action;
			return {
				...state,
				dress: [...state.dress, clothes],
			};
			break;
		case "DELETE_LIST":
			const { index } = action;
			console.log(index);
			return {
				...state,
				dress: state.dress.filter((Element, id) => id !== index),
			};
			break;
		case "EDIT_LIST":
			console.log(action.index);
			const { cloth } = action;
			const id = action.index;
			return {
				...state,
				id: id,
				cloth,
				// id,
			};
			break;
		case "UPDATE_LIST":
			// console.log("coming as updated data", action.data, "the id" + state.data);
			console.log("this is dress", state);
			return {
				// ...state,
				dress: state.dress.map((element, ind) => {
					if (ind === state.id) {
						return action.data;
					}
					return element;
				}),
			};
			break;
		default:
			return state;
	}
};
export default Reducer;























