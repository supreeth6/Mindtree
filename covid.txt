index.js

import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import * as serviceWorker from "./serviceWorker";
import store from "./store";
import { Provider } from "react-redux";

ReactDOM.render(
	<Provider store={store}>
		<App />
	</Provider>,
	document.getElementById("root")
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();

store.js

// import { createStore, applyMiddleware } from "redux";

import { createStore, applyMiddleware } from "redux";
import asyncReducer from "./reducers";
import thunk from "redux-thunk";

const store = createStore(asyncReducer, applyMiddleware(thunk));

export default store;

app.js
import React, { Component } from "react";
import "./App.css";
import { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";

import ListOfState from "./ListOfState";

import AppBar from "@material-ui/core/AppBar";
import States from "./States";

class App extends Component {
	render() {
		/*     console.log(this.state) */
		return (
			<div className="App">
				<AppBar position="static">Covid Cases</AppBar>

				<AppBar position="static" color="default">
					<Router>
						{/* <ul>
							<li>
								<Link to="/rajasthan">Rajasthan</Link>
							</li>
							<li>
								<Link to="/bihar">Bihar</Link>
							</li>
							<li>
								<Link to="/westbengal">Westbengal</Link>
							</li>
						</ul> */}
						<Switch>
							<Route
								exact
								path="/"
								component={(props) => <ListOfState {...props} />}
							/>
							<Route exact path="/statedata" component={States}></Route>
							{/* <Route exact path="/bihar" component={Bihar}></Route>
							<Route exact path="/westbengal" component={Westbengal}></Route> */}
						</Switch>
					</Router>
				</AppBar>
			</div>
		);
	}
}

export default App;

listofstate.js
import React, { Component } from "react";
import { thunk_action_creator } from "./actions/fetchAction";
import { connect } from "react-redux";
import { showDistrict } from "./actions/fetchAction";
class ListOfState extends Component {
	componentDidMount() {
		this.props.dispatch(thunk_action_creator());
	}
	clickable = (event, state) => {
		this.props.dispatch(showDistrict(state));
		this.props.history.push("/statedata");
	};
	render() {
		return (
			<div>
				{this.props.covid19.distinctData.map((s, i) => {
					return (
						<p
							key={i}
							onClick={(e) => {
								this.clickable(e, s);
							}}
						>
							{s}
						</p>
					);
				})}
			</div>
		);
	}
}
function mapStateToProps(state) {
	console.log(state);
	return { covid19: state };
}
export default connect(mapStateToProps)(ListOfState);

states.js
import React, { Component } from "react";
import { connect } from "react-redux";
class States extends Component {
	render() {
		console.log("distinct data", this.props.distinctDistrict);
		const obj = this.props.district.stateData
			.map((item) => item.detecteddistrict)
			.filter((value, index, arry) => arry.indexOf(value) === index);
		let a = 0,
			b = 0,
			c = 0;
		const nOfM = this.props.district.stateData.map((el) => {
			if (el.gender === "M") {
				a++;
			}
		});
		const nOfF = this.props.district.stateData.map((el) => {
			if (el.gender === "F") {
				b++;
			}
		});
		const nOfU = this.props.district.stateData.map((el) => {
			if (el.gender !== "F" && el.gender !== "M") {
				c++;
			}
		});
		console.log("check m & f", a, b);
		return (
			<>
				<th>
					<td>District affected</td>

					<td>unknown</td>
				</th>
				{obj.map((dist, i) => {
					console.log(dist);
					return (
						<tr key={i}>
							<td>{dist}</td>
						</tr>
					);
				})}
				<tr>
					<td>Male{a}</td>
					<td>Female{b}</td>
					<td>Unknown{c}</td>
				</tr>
			</>
		);
	}
}
const mapStateToProps = (state) => {
	console.log("filtered", state);
	return {
		district: state,
	};
};
export default connect(mapStateToProps)(States);


action.js
import store from "../store";
// export const fetch_post = () => {
// 	return {
// 		type: "FETCH_USER",
// 	};
// };

export const receive_post = (post) => {
	console.log(post, "coming from action");
	return {
		type: "FETCHED_USER",
		data: post.raw_data,
	};
};
export const showDistrict = (state) => {
	return {
		type: "SHOW_DISTRICT",
		district: state,
	};
};
// export const receive_error = () => {
// 	return {
// 		type: "RECEIVE_ERROR",
// 	};
// };

export const thunk_action_creator = () => {
	// console.log(detectedstate);

	// store.dispatch(fetch_post());
	return function (dispatch, getState) {
		return fetch(`https://api.covid19india.org/raw_data3.json`)
			.then((data) => data.json())
			.then((data) => {
				if (data.message === "Not Found") {
					throw new Error("No such data found!!");
				} else dispatch(receive_post(data));
			});
		// .catch((err) => dispatch(receive_error()));
	};
};


reducers.js
const initialState = {
	userData: [], //all the data
	distinctData: [], //distrinct states
	stateData: [], // all the details of state means disticts
	// distinctDistrict: [],
	// numOfMales: "",
	// numOfFemales: "",
	// isFetching: false,
	// isError: false,
};
const asyncReducer = (state = initialState, action) => {
	console.log(state, action);
	const calculate = (states) => {
		let i = 0;
		states.map((element, i) => {
			if (element.gender === "M") {
				i++;
			}
		});
		return i;
	};
	switch (action.type) {
		// case "FETCH_USER":
		// 	// console.log(action);
		// 	return Object.assign({}, state, {
		// 		isFetching: true,
		// 		// ...state,
		// 		// userData,
		// 		isError: false,
		// 	});
		// case "FETCHED_USER":
		// 	return Object.assign({}, state, {
		// 		userData: action.data.raw_data,
		// 		isFetching: false,
		// 		isError: false,
		// 		disticts: [...new Set(state.userData.map((d) => d.detecteddistrict))],
		// 		//  console.log(disticts)
		// 	});
		case "FETCHED_USER":
			const { data } = action;
			console.log(data);
			return {
				...state,
				// isFetching: false,
				// isError: false,
				userData: action.data,
				distinctData: [...new Set(action.data.map((d) => d.detectedstate))],
			};
			break;

		case "SHOW_DISTRICT":
			const { district } = action;
			console.log("is it mutated?", state.userData);
			return {
				...state,
				stateData: state.userData.filter(
					(element, i) => district === element.detectedstate
				),
				// distinctDistrict: [
				// 	...new Set(state.stateData.map((d) => d.raw_data.detecteddistrict)),
				// ],
				// numOfMales: calculate(state.stateData),

				// case "RECEIVE_ERROR":
				// 	return Object.assign({}, state, {
				// 		isError: true,
				// 		isFetching: false,
				// 	});
			};
		default:
			return state;
	}
};

export default asyncReducer;









